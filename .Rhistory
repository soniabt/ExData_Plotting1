?rmarkdown
??rmarkdown
rmarkdown
library(rmarkdown)
search()
rmarkdown
install.packages(KernSmooth)
??KernSmooth
?KernSmooth
install.packages("KernSmooth")
library(KernSmooth)
?search
search()
q()
?markdown
??markdown
?rmarkdown
??rmarkdown
?---
)
?---
?---
?)
## This is a markdown file
quartile(Declination)
?quartile
quantile(Declination)
?options
getoptions()
getOptions{}
getOptions()
getOption()
getoption()
?getoption
?options
options()
getoption("digits")
??getoption
?get0ption
options(digits)
x
ls
ls()
a
ls()
?rm
rm(a)
ls()
pass
rm(pass)
ls()
pkgs
?optoins
?options
op=options()
op
rm(op)
?Startup
formalArgs(jitter)
?jitter
'-'(y,mean(y))
'-'(x,mean(x))
ls()
y=seq(1:10)
'-'(y,mean(y))
i=3
y[3]
y[i]
'['(y,i)
1:length(y)
q()
?sapply
?lapply
ls()
for(i in 1:100 {})
for (i in 1:100 {
for (i in 1:100) {
if(i<= 20) {
##skip the first 20 iterations
next
}
print(i)
}
for (i in 1:4) {
print(x[i])
}
x=c("a","b","c","d")
for (i in 1:4) {
print(x[i])
}
for(letter in x) {
print(letter)
}
fodr(i in 1:4) print(x[i])
for(i in 1:4) print(x[i])
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(i,j,x[i,j])
}
}
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(i),print(j),print(x[i,j])
for (i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(i)
print(j)
print(x[i,j])
}
}
x=rand(x)
x=rand()
?rand
??rand
?randu
?rnorm
rnorm()
x=5
if(x>3) {}
if(x>3) {
y<-10
} else {
y<-0
}
y
?computeEstimate
??computeEstimate
add2(3,5)
source('~/.active-rstudio-document')
add2(3,5)
source('~/.active-rstudio-document')
add2(3,5)
x=seq(1:30)
above(x,12)
source('~/.active-rstudio-document')
above(x,12)
above(x,118)
above(x,18)
above(x,2)
above(x,29)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
above10(x)
source('~/.active-rstudio-document')
above(x)
above(x,16)
q()
bill=as.Date("1958-09-11")
weekdays(bill)
?unclass
x=Sys.time()
x
p=as.POSIXlt(x)
names(p)
names(unclass(p))
p$sec
datestring=c("January10, 2012 10:40","December 9, 2011 9:10")
x=strptime(datestring,"%B %d,%Y %H:%M")
x
class(x)
x=as.Date("2012-01-01")
y=strptime("9 Jan 2011 11:34:21",%d %b %Y %H:%M:%S"")
y=strptime("9 Jan 2011 11:34:21","%d %b %Y %H:%M:%S)
)
y=strptime("9 Jan 2011 11:34:21","%d %b %Y %H:%M:%S")
x-y
x=POSIXlt(x)
x=as.POSIXlt(x)
x-y
q()
ls()
lapply
?.Internal
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
q()
getwd()
q()
q()
ls()
rm(list=ls())
ls()
q()
theta=seq(0,pi,pi/24)
x=theta-sin(theta)
y=1-cos(theta)
plot(x,y)
theta=seq(0,2pi,pi/24)
theta=seq(0,2*pi,pi/24)
x=theta-sin(theta)
y=1-cos(theta)
plot(x,y)
theta=seq(0,4*pi,pi/24)
x=theta-sin(theta)
y=1-cos(theta)
plot(x,y)
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c").each=3),z=rnorm(9))
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT
DF
set.seed(3)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
set.seed(3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT
DF
tables()
DT(2,)
DT[2,]
DT[,2]
DT[,list(mean(x),sum(z))]
mean(DT$x)
sum(DT$z)
View(DT)
DT[,w:=z^2]
DT
DT2<-DT
DT[,y:=2]
DT[,y := 2]
DT
DT2
DT2<-copy(DT)
DT2
library(tidyr)
DT2<-gather(DT,x,z,w)
DT2
rm(DT2)
DT2<-gather(DT,-y)
DT2<-gather(DT,x,z,w-y)
DT2
?gather
DT2<-DT[x,z,w]
swirl()
library(swirl)
rm(list=ls())
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Err_Find")
install_from_swirl("ErrFind")
install_from_swirl("Data_Analysis")
install_from_swirl("Exploratory_Data_Analysis")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Open_Intro")
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
DT
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
?version
R.Version()
getwd()
q()
version
update.packages()
version
packageStatus
packageStatus()
library(data.table)
R.Version()
?updata.packages
?update.packages
up.packages()
update.packages()
version
packageStatus()
data.table()
library(data.table)
getwd()
ls()
library(dplyr)
update.packages(checkBuilt=TRUE)
.packages
.packages()
installed.packages()
getwd()
q()
q()
q()
?fortune
??fortune
??fortunes
require(fortunes)
install.packages("fortunes")
library(fortunes)
require(fortunes)
fortunes("brain surgery")
fortune("brain surgery")
q()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,"package")
by_package<-group_by(cran,package)
by_package
?summarize
summarize(by_package,mean)
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sort<-arrange(top_unique,desc(unique))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
ls()
rm(list=ls())
ls()
q()
ls()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality,xlab="Month",ylab="Ozone (ppb",col.axis="blue",col.lab="red")
boxplot(Ozone ~ Month, airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
?par
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
bye()
swirl()
plot(airquality$Wind,airquality$Ozone,lty="n")
head(airquality)
plot(airquality$Wind,airquality$Ozone,type ="n")
title(main="Wind and Ozone in NYC")
may=airquality[,airquality$Month == 5]
may=airquality[airquality$Month == 5,]
may<-subset(airquality,Month==5)
?points
?with
with(airquality,points(Wind,Ozone,pch=17))
with(may,points(Wind,Ozone,pch=17,col="blue"))
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,pch=8,col="red")
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
?abline
abline(x=median(airquality$Wind),lty=2,lwd=2)
abline(=median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow = c(1,3),mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone,main="Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,main="Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|as.factor(Month),airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R",local=TRUE)
source('/Library/Frameworks/R.framework/Versions/3.2/Resources/library/swirl/Courses/Exploratory_Data_Analysis/Lattice_Plotting_System//plot1.R')
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
swirl()
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
seq(0,1,len=6)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,alpha=.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
colorRampPalette(cols)
pal<-colorRampPalette(cols)
pal(20)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
install.packages("png")
library(grid)
library(png)
swirl()
str(mpg)
qplot(displ,hwy,mpg)
library(ggplot2)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
g<-ggplot2(mpg,aes(displ,hwy))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
bye()
q()
setwd("~/Desktop/Coursera/4 Exploratory Data Analysis/Week 1")
source('~/Desktop/Coursera/4 Exploratory Data Analysis/Week 1/powergraphs.R')
par(mfrow=c(2,2))
with(powerdat,   {
plot(DateTime,Global_active_power,type="l",xlab="",ylab="Global Active Power")
plot(DateTime,Voltage,type="l",xlab="datetime",ylab="Voltage")
plot(DateTime,Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DateTime,Sub_metering_2,type="l",col="red")
lines(DateTime,Sub_metering_3,type="l",col="blue")
legend("topright",lty=1,col=c("black","red","blue"),bty = "n",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime,Global_reactive_power,type="l",xlab="datetime",col="black")
} )
png(filename="fig4.png",width=480,height=480,units="px")
par(mfrow=c(2,2))
with(powerdat,   {
plot(DateTime,Global_active_power,type="l",xlab="",ylab="Global Active Power")
plot(DateTime,Voltage,type="l",xlab="datetime",ylab="Voltage")
plot(DateTime,Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(DateTime,Sub_metering_2,type="l",col="red")
lines(DateTime,Sub_metering_3,type="l",col="blue")
legend("topright",lty=1,col=c("black","red","blue"),bty = "n",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
plot(DateTime,Global_reactive_power,type="l",xlab="datetime",col="black")
} )
dev.off()
rm(list=ls())
q()
